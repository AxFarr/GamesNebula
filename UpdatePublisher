from tkinter import *
import tkinter.messagebox as tm
import tkinter as tk
import Users
import re
from tkinter import ttk
import sqlite3
from Popup import *
from tkinter.ttk import Treeview


db = sqlite3.connect('game nebula.db')
c = db.cursor()



class UpdatePublisherFrame(Frame):
    def __init__(self, master):
        Frame.__init__(self, master)

        self.master = master
        self.mainUI()

    def mainUI(self):

        self.master.title("Games Nebula")
        self.pack(fill=BOTH, expand=True)
        root.resizable(width=FALSE, height=FALSE)

        frame1 = Frame(self)
        frame1.pack(fill=X)
        frame2 = Frame(self)
        frame2.pack(fill=X)
        frame3 = Frame(self)
        frame3.pack(fill=X)
        frame4 = Frame(self)
        frame4.pack(fill=X)
        frame5 = Frame(self)
        frame5.pack(fill=X)
        frame6 = Frame(self)
        frame6.pack(fill=X)
        frame7 = Frame(self)
        frame7.pack(fill=X)

        self.add_label = Label(frame1, text="Update a Publisher...  (Enter a Publisher, press 'Search for Publisher', then enter the new info and press 'Update Publisher)", \
                               fg='green', relief='groove', width='150')
        self.add_label.pack(side=TOP, padx=5, pady=15)

        self.pub_label = Label(frame2, text="Publisher")
        self.pub_label.pack(side=LEFT, padx=5, pady=5)
        self.pub_entry = Entry(frame2, borderwidth=2)
        self.pub_entry.pack(side=LEFT)

        self.address_label = Label(frame2, text="Address")
        self.address_label.pack(side=LEFT, padx=5, pady=10)
        self.address_entry = Entry(frame2, borderwidth=2)
        self.address_entry.pack(side=LEFT)

        self.pres_label = Label(frame3, text="President")
        self.pres_label.pack(side=LEFT, padx=5, pady=10)
        self.pres_entry = Entry(frame3, borderwidth=2)
        self.pres_entry.pack(side=LEFT)

        self.founded_label = Label(frame3, text="Founded (d/m/yyyy)", relief='groove')
        self.founded_label.pack(side=LEFT, padx=15, pady=5)
        self.founded_entry = Entry(frame3, borderwidth=2)
        self.founded_entry.pack(side=LEFT)

        gs = Treeview(frame6)
        scrollbar = Scrollbar(frame6, orient='vertical', command=gs.yview)
        gs.configure(yscroll=scrollbar.set)
        gs['columns'] = (
            'Publisher', 'Address', 'President', 'Founded')
        gs.heading("#0", text='', anchor='w')
        gs.column("#0", width=0)
        gs.heading('Publisher', text='Publisher')
        gs.column('Publisher', anchor='n',  width=175)
        gs.heading('Address', text='Address')
        gs.column('Address', anchor='n', width=200)
        gs.heading('President', text='President')
        gs.column('President', anchor='n', width=150)
        gs.heading('Founded', text='Founded')
        gs.column('Founded', anchor='n', width=100)

        gs.pack(side=LEFT, pady=10)
        scrollbar.pack(side=LEFT, fill=Y)
        self.treeview = gs
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        self.addbtn = Button(frame7, text="Search for Publisher", command=self._search_btn_clicked, fg='green', activebackground= 'green')
        self.addbtn.pack(side=LEFT, padx=20, pady=20)
        self.addbtn = Button(frame7, text="Update Publisher", command=self._update_btn_clicked, fg='green', activebackground= 'green')
        self.addbtn.pack(side=LEFT, padx=20, pady=20)

        c.execute('SELECT * FROM publishers')
        result = c.fetchall()
        for item in result:
            self.treeview.insert('', 0, values=item)

    def _search_btn_clicked(self):
        self.treeview.delete(*self.treeview.get_children())
        publisher = self.pub_entry.get()


        def CheckPubExists(publisher):
            c.execute("SELECT name FROM publishers WHERE name=?", (publisher,))
            data = c.fetchall()
            if not data:
                return False
            else:
                return True

        if len(publisher) == 0:
            pu.onNoPub()
        elif CheckPubExists(publisher) == True:
            c.execute('SELECT * FROM publishers WHERE name =?', (publisher,))
            result = c.fetchall()
            for item in result:
                self.treeview.insert('', 0, values = item)
        else:
            pu.onPublisherNonExistent()



    def _update_btn_clicked(self):

        self.treeview.delete(*self.treeview.get_children())
        publisher = self.pub_entry.get()
        address = self.address_entry.get()
        president = self.pres_entry.get()
        founded = self.founded_entry.get()

        def CheckPubExists(publisher):
            c.execute("SELECT name FROM publishers WHERE name =?", (publisher,))
            data = c.fetchall()
            if not data:
                return False
            else:
                return True

        def CheckNothingChanged(publisher):
            c.execute("SELECT password FROM UserData WHERE name=?", (publisher,))
            data = c.fetchall()
            if data == "'[('"+address+"',)]":
                return True
            else:
                return False


        if CheckPubExists(publisher) == True:
            if CheckNothingChanged(publisher) == True:
                pu.onNothingUpdated()
            else:
                c.execute('UPDATE publishers SET address =? WHERE name =?', (address, publisher))
                db.commit()

                c.execute('UPDATE publishers SET president =? WHERE name =?', (president, publisher))
                db.commit()

                c.execute('UPDATE publishers SET founded =? WHERE name =?', (founded, publisher))
                db.commit()

                c.execute('SELECT * FROM publishers WHERE name=?', (publisher,))
                result = c.fetchall()
                for item in result:
                    self.treeview.insert('', 0, values=item)
        else:
            pu.onNothingInTable()



root = Tk()
def on_closing():
    root.withdraw()
root.protocol("WM_DELETE_WINDOW", on_closing)
pu = Popup(parent=root)
root.geometry("675x500+300+300")
lf = UpdatePublisherFrame(root)
root.mainloop()
