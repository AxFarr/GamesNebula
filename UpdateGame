from tkinter import *
import tkinter.messagebox as tm
import tkinter as tk
import Users
import re
from tkinter import ttk
import sqlite3
from Popup import *
from tkinter.ttk import Treeview


db = sqlite3.connect('game nebula.db')
c = db.cursor()

genres= ['Action Role-Playing', 'Action-Adventure', 'Fighting',  \
         'Party Game', 'Platformer', 'Racing', 'Real-Time Strategy', 'Rhythm Game', 'Role-Playing', 'Sandbox', 'Shooter', 'Survival Horror', ]
publishers= ['Other', 'Warner Brothers', 'Valve Corporation', 'Ubisoft', 'Square Enix', 'Sony Computer Entertainment', 'Sega', 'SUPERHOT Team', 'Nintendo', 'Microsoft Studios', \
             'Konami', 'Harmonix', 'Frictional Games', 'Electronic Arts', 'Digital Extremes', 'Deep Silver', 'Capcom', 'Bethesda Softworks', \
             'Bandai Namco Entertainment', 'Activision', '343 Industries', '2K Games']
publishers.reverse()


class UpdateGameFrame(Frame):
    def __init__(self, master):
        Frame.__init__(self, master)

        self.master = master
        self.mainUI()

    def mainUI(self):

        self.master.title("Games Nebula")
        self.pack(fill=BOTH, expand=True)
        root.resizable(width=FALSE, height=FALSE)

        frame1 = Frame(self)
        frame1.pack(fill=X)
        frame2 = Frame(self)
        frame2.pack(fill=X)
        frame3 = Frame(self)
        frame3.pack(fill=X)
        frame4 = Frame(self)
        frame4.pack(fill=X)
        frame5 = Frame(self)
        frame5.pack(fill=X)
        frame6 = Frame(self)
        frame6.pack(fill=X)
        frame7 = Frame(self)
        frame7.pack(fill=X)

        self.add_label = Label(frame1, text="Update a Game...  (Enter a game name, press 'Search for Game', then enter the new info and press 'Update Game')", fg='green', relief='groove', width='150')
        self.add_label.pack(side=TOP, padx=5, pady=15)

        self.game_label = Label(frame2, text="Game name")
        self.game_label.pack(side=LEFT, padx=5, pady=5)
        self.game_entry = Entry(frame2, borderwidth=2)
        self.game_entry.pack(side=LEFT)

        self.genre_label = Label(frame2, text="Genre")
        self.genre_label.pack(side=LEFT, padx=5, pady=5)
        self.genreBoxvalue = StringVar(root)
        self.genreBox = ttk.Combobox(frame2, textvariable=self.genreBoxvalue)
        self.genreBox['values'] = (genres)
        self.genreBox.current(0)
        self.genreBox.pack(side=LEFT, padx=5)

        self.rating_label = Label(frame2, text="Rating")
        self.rating_label.pack(side=LEFT, padx=1, pady=5)
        self.ratingBoxvalue = StringVar(root)
        self.ratingBox = ttk.Combobox(frame2, textvariable=self.ratingBoxvalue)
        self.ratingBox['values']= ('Everyone', 'Teen', 'Mature')
        self.ratingBox.current(2)
        self.ratingBox.pack(side=LEFT, padx=5)

        gs = Treeview(frame6)
        scrollbar = Scrollbar(frame6, orient='vertical', command=gs.yview)
        gs.configure(yscroll=scrollbar.set)
        gs['columns'] = (
            'name', 'genre', 'ESRB', 'publisher', 'release date', 'singleplayer', 'multiplayer', 'windows', 'ps4',
            'xboxone', 'wiiu')
        gs.heading("#0", text='', anchor='w')
        gs.column("#0", width=0)
        gs.heading('name', text='Name')
        gs.column('name', anchor='n', width=80)
        gs.heading('genre', text='Genre')
        gs.column('genre', anchor='n', width=80)
        gs.heading('ESRB', text='ESRB')
        gs.column('ESRB', anchor='n', width=60)
        gs.heading('publisher', text='Publisher')
        gs.column('publisher', anchor='n', width=95)
        gs.heading('release date', text='Release Date')
        gs.column('release date', anchor='n', width=80)
        gs.heading('singleplayer', text='Single Player')
        gs.column('singleplayer', anchor='n', width=80)
        gs.heading('multiplayer', text='Multiplayer')
        gs.column('multiplayer', anchor='n', width=80)
        gs.heading('windows', text='Windows')
        gs.column('windows', anchor='n', width=60)
        gs.heading('ps4', text='PS4')
        gs.column('ps4', anchor='n', width=60)
        gs.heading('xboxone', text='XBoxOne')
        gs.column('xboxone', anchor='n', width=60)
        gs.heading('wiiu', text='WiiU')
        gs.column('wiiu', anchor='n', width=60)

        gs.pack(side=LEFT, pady=10)
        scrollbar.pack(side=LEFT, fill=Y)
        self.treeview = gs
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        self.publisher_label = Label(frame3, text="Publisher")
        self.publisher_label.pack(side=LEFT, padx=5, pady=5)
        self.publisherBoxvalue = StringVar(root)
        self.publisherBox = ttk.Combobox(frame3, textvariable=self.publisherBoxvalue)
        self.publisherBox['values'] = (publishers)
        self.publisherBox.current(0)
        self.publisherBox.pack(side=LEFT, padx=5, pady=20)

        self.release_label = Label(frame3, text="Release Date (mm/dd/yyyy)")
        self.release_label.pack(side=LEFT, padx=20, pady=5)
        self.release_entry = Entry(frame3, borderwidth=2)
        self.release_entry.pack(side=LEFT)

        self.mode_label = Label(frame4, text="Multi-Player?", relief = 'groove')
        self.mode_label.pack(side=LEFT, padx=5, pady=5)
        self.mpSpinBox = Spinbox(frame4, values=('Yes', 'No'), width=8)
        self.mpSpinBox.pack(side=LEFT, pady=10)

        self.mode_label = Label(frame4, text="Single Player?", relief='groove')
        self.mode_label.pack(side=LEFT, padx=5, pady=5)
        self.spSpinBox = Spinbox(frame4, values = ('Yes', 'No'), width=8)
        self.spSpinBox.pack(side=LEFT, pady=10)

        self.mode_label = Label(frame4, text="Select all platforms \n this game is available for:")
        self.mode_label.pack(side=LEFT, padx=5, pady=5)
        self.listbox = Listbox(frame4, selectmode='multiple', activestyle='dotbox', height=4, borderwidth=2, highlightcolor='green')
        self.listbox.pack(side=LEFT, pady=5, padx=10)
        for item in ["Windows", "PS4", "Xbox One", "WiiU"]:
            self.listbox.insert(END, item)

        self.addbtn = Button(frame7, text="Search for Game", command=self._search_btn_clicked, fg='green', activebackground= 'green')
        self.addbtn.pack(side=LEFT, padx=20, pady=20)
        self.addbtn = Button(frame7, text="Update Game", command=self._update_btn_clicked, fg='green', activebackground= 'green')
        self.addbtn.pack(side=LEFT, padx=20, pady=20)

        c.execute('SELECT * FROM games')
        result = c.fetchall()
        for item in result:
            self.treeview.insert('', 0, values=item)



    def _search_btn_clicked(self):
        self.treeview.delete(*self.treeview.get_children())
        gameName = self.game_entry.get()

        def CheckGameExists(gameName):
            c.execute("SELECT name FROM games WHERE name=?", (gameName,))
            data = c.fetchall()
            if not data:
                return False
            else:
                return True

        if len(gameName) == 0:
            pu.onNoName()
        elif CheckGameExists(gameName) == True:
            c.execute('SELECT * FROM games WHERE name = ?', (gameName,))
            result = c.fetchall()
            for item in result:
                self.treeview.insert('', 0, values = item)
        else:
            pu.onGameNonExistent()



    def _update_btn_clicked(self):

        self.treeview.delete(*self.treeview.get_children())
        gameName = self.game_entry.get()
        genre = self.genreBox.get()
        rating = self.ratingBox.get()
        publisher = self.publisherBox.get()
        release = self.release_entry.get()

        SinglePlayer = self.spSpinBox.get()
        MultiPlayer = self.mpSpinBox.get()
        Windows = 'FALSE'
        PS4 = 'FALSE'
        XboxOne = 'FALSE'
        WiiU = 'FALSE'

        if SinglePlayer == 'Yes':
            SinglePlayer = 'TRUE'
        else:
            SinglePlayer = 'FALSE'
        if MultiPlayer == 'Yes':
            MultiPlayer = 'TRUE'
        else:
            MultiPlayer = 'FALSE'

        if 0 in self.listbox.curselection():
            Windows = 'TRUE'
        if 1 in self.listbox.curselection():
            PS4 = 'TRUE'
        if 2 in self.listbox.curselection():
            XboxOne = 'TRUE'
        if 3 in self.listbox.curselection():
            WiiU = 'TRUE'

        def CheckGameExists(gameName):
            c.execute("SELECT name FROM games WHERE name=?", (gameName,))
            data = c.fetchall()
            if not data:
                return False
            else:
                return True

        def CheckNothingChanged(gameName):
            c.execute("SELECT genre FROM games WHERE name=?", (gameName,))
            data = c.fetchall()
            print(data)
            print(genre)
            if data == "'[('"+genre+"',)]":
                return True
            else:
                return False


        if CheckGameExists(gameName) == True:
            if CheckNothingChanged(gameName) == True:
                pu.onNothingUpdated()
            else:
                c.execute('UPDATE games SET genre = ? WHERE name = ?', (genre, gameName))
                db.commit()

                c.execute('UPDATE games SET ESRB = ? WHERE name = ?', (rating, gameName))
                db.commit()

                c.execute('UPDATE games SET publisher = ? WHERE name = ?', (publisher, gameName))
                db.commit()

                c.execute('UPDATE games SET "release date" = ? WHERE name = ?', (release, gameName))
                db.commit()

                c.execute('UPDATE games SET singleplayer = ? WHERE name = ?', (SinglePlayer, gameName))
                db.commit()

                c.execute('UPDATE games SET multiplayer = ? WHERE name = ?', (MultiPlayer, gameName))
                db.commit()

                c.execute('UPDATE games SET windows = ? WHERE name = ?', (Windows, gameName))
                db.commit()

                c.execute('UPDATE games SET PS4 = ? WHERE name = ?', (PS4, gameName))
                db.commit()

                c.execute('UPDATE games SET XBONE = ? WHERE name = ?', (XboxOne, gameName))
                db.commit()

                c.execute('UPDATE games SET WIIU = ? WHERE name = ?', (WiiU, gameName))
                db.commit()

                c.execute('SELECT * FROM games WHERE name = ?', (gameName,))
                result = c.fetchall()
                for item in result:
                    self.treeview.insert('', 0, values=item)
        else:
            pu.onNothingInTable()



root = Tk()
def on_closing():
    root.withdraw()
root.protocol("WM_DELETE_WINDOW", on_closing)
pu = Popup(parent=root)
root.geometry("1000x600+300+300")
lf = UpdateGameFrame(root)
root.mainloop()
